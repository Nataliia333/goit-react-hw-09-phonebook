{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Contacts/Contacts.js"],"names":["module","exports","name","number","dispatch","contact","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","message","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","a","fetchContactRequest","get","fetchContactSuccess","fetchContactError","getFilter","state","contacts","filter","getContacts","items","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","connect","contactsSelectors","onAdd","value","contactsOperations","item","onInputChange","event","target","id","className","styles","ContactForm","type","onChange","ContactButton","onClick","preventDefault","map","alert","isLoadingContacts","fetchContacts","onDelete","useEffect","handlerDelete","currentTarget","updateFilter","placeholder","Contacts","Container","Component"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,cAAgB,qC,mBCAjFD,EAAOC,QAAU,CAAC,cAAgB,sC,kMC0CnB,EAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OAAsB,SAAAC,GACvC,IAAMC,EAAU,CAAEH,OAAMC,UAGxBC,EAASE,eACTC,IACGC,KAAK,YAAaH,GAClBI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcN,EAASO,YAAkBD,OAC9CE,OAAM,SAAAC,GAAK,OAAIT,EAASU,YAAgBD,EAAME,eAWpC,EARO,SAAAC,GAAS,OAAI,SAAAZ,GACjCA,EAASa,eACTV,IACGW,OADH,oBACuBF,IACpBP,MAAK,kBAAML,EAASe,YAAqBH,OACzCJ,OAAM,SAAAC,GAAK,OAAIT,EAASgB,YAAmBP,EAAME,eAGvC,EA7BO,yDAAM,WAAMX,GAAN,iBAAAiB,EAAA,6DAC1BjB,EAASkB,eADiB,kBAGDf,IAAMgB,IAAI,aAHT,gBAGhBb,EAHgB,EAGhBA,KACRN,EAASoB,YAAoBd,IAJL,gDAMxBN,EAASqB,YAAkB,KAAMV,UANT,yDAAN,uD,QCPhBW,EAAY,SAAAC,GAAK,OAAIA,EAAMC,SAASC,QACpCC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAqB7B,GACbC,WA1BiB,SAAAL,GACjB,OAAOA,EAAMC,SAASK,SA0BtBP,YACAI,cACAI,mBAdyBC,YACzB,CAACL,EAAaJ,IACd,SAACE,EAAUC,GACT,IAAMO,EAAmBP,EAAOQ,cAChC,OAAOT,EAASC,QAAO,qBAAG3B,KACnBmC,cAAcC,SAASF,U,wBCiCnBG,eAjBS,SAAAZ,GACtB,MAAO,CACLC,SAAUY,EAAkBV,YAAYH,OAInB,SAAAvB,GACvB,MAAO,CACLqC,MAAO,SAAAC,GAAK,OAAItC,EAASuC,EAA8BD,QAS5CH,EAjDK,SAAC,GAAyB,IAAvBX,EAAsB,EAAtBA,SAAUa,EAAY,EAAZA,MAC3BG,EAAO,CAAE1C,KAAM,GAAIC,OAAQ,IAEzB0C,EAAgB,SAAAC,GACpBF,EAAI,2BAAQA,GAAR,kBAAeE,EAAMC,OAAOC,GAAKF,EAAMC,OAAOL,SAepD,OACE,uBAAMO,UAAWC,IAAOC,YAAxB,UACE,yCACA,uBAAOC,KAAK,OAAOC,SAAUR,EAAeG,GAAG,SAC/C,2CACA,uBAAOI,KAAK,OAAOC,SAAUR,EAAeG,GAAG,WAC/C,wBAAQC,UAAWC,IAAOI,cAAeF,KAAK,SAASG,QAb5C,SAAAT,GACbA,EAAMU,iBALQ5B,EAAS6B,KAAI,SAAApD,GAAO,OAAIA,EAAQH,QACjCoC,SAASM,EAAK1C,MAMvBwD,MAAM,GAAD,OAAId,EAAK1C,KAAT,6BACLuC,EAAMG,IASR,8B,iBCwBSL,eAlBS,SAAAZ,GACtB,MAAO,CACLC,SAAUY,EAAkBN,mBAAmBP,GAC/CE,OAAQW,EAAkBd,UAAUC,GACpCgC,kBAAmBnB,EAAkBR,WAAWL,OAI3B,SAAAvB,GAAQ,MAAK,CACpCwD,cAAe,kBAAMxD,EAASuC,MAC9BkB,SAAU,SAAAnB,GAAK,OAAItC,EAASuC,EAAiCD,QAQhDH,EAlDM,SAAC,GAKf,IAJLX,EAII,EAJJA,SACA+B,EAGI,EAHJA,kBACAE,EAEI,EAFJA,SACAD,EACI,EADJA,cAEAE,qBAAU,kBAAMF,MAAiB,IAEjC,IAAMG,EAAgB,SAAAjB,GACpBe,EAASf,EAAMkB,cAAchB,KAG/B,OACE,6BACGpB,EAAS6B,KAAI,gBAAGT,EAAH,EAAGA,GAAI9C,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,+BACGD,EADH,KACWC,EACT,wBACE6C,GAAIA,EACJC,UAAWC,IAAOI,cAClBF,KAAK,SACLG,QAASQ,EAJX,oBAQCJ,GAAqB,8CAVfX,W,QCKFT,cAAQ,MAVE,SAAAnC,GACvB,MAAO,CACL6D,aAAc,SAAAnB,GAAK,OAAI1C,EAAS6D,YAAanB,EAAMC,OAAOL,YAQ/CH,EAvBA,SAAC,GAAsB,IAApB0B,EAAmB,EAAnBA,aAChB,OACE,8BACE,uBACEb,KAAK,OACLC,SAAUY,EACVjB,GAAG,OACHkB,YAAY,+BCLCC,E,4JACnB,WACE,OACE,eAACC,EAAA,EAAD,WACE,8CACA,cAAC,EAAD,IACA,+CACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAR8BC","file":"static/js/3.f32b43f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__2CgrJ\",\"ContactButton\":\"ContactForm_ContactButton__Cn0Wv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactButton\":\"ContactsList_ContactButton__oMnTy\"};","import axios from 'axios';\r\n\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error.message));\r\n  }\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  const contact = { name, number };\r\n  // console.log(contact);\r\n\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n};\r\n","// мемоизация селекторов\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\n//\r\nconst getLoading = state => {\r\n  return state.contacts.loading;\r\n};\r\nconst getFilter = state => state.contacts.filter;\r\nconst getContacts = state => state.contacts.items;\r\n\r\n// const getVisibleContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const contacts = getContacts(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n// мемоизация селекторов\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getContacts,\r\n  getVisibleContacts,\r\n};\r\n","import { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './ContactForm.module.css';\r\n\r\nconst ContactForm = ({ contacts, onAdd }) => {\r\n  let item = { name: '', number: '' };\r\n\r\n  const onInputChange = event => {\r\n    item = { ...item, [event.target.id]: event.target.value };\r\n  };\r\n\r\n  const isAlreadyContact = () => {\r\n    const Names = contacts.map(contact => contact.name);\r\n    return Names.includes(item.name);\r\n  };\r\n\r\n  const onSave = event => {\r\n    event.preventDefault();\r\n    isAlreadyContact()\r\n      ? alert(`${item.name} is already in contacts.`)\r\n      : onAdd(item);\r\n  };\r\n\r\n  return (\r\n    <form className={styles.ContactForm}>\r\n      <label>Name</label>\r\n      <input type=\"text\" onChange={onInputChange} id=\"name\"></input>\r\n      <label>Number</label>\r\n      <input type=\"text\" onChange={onInputChange} id=\"number\"></input>\r\n      <button className={styles.ContactButton} type=\"submit\" onClick={onSave}>\r\n        AddContact\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchProps = dispatch => {\r\n  return {\r\n    onAdd: value => dispatch(contactsOperations.addContact(value)),\r\n  };\r\n};\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onAdd: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactForm);\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\r\nimport styles from './ContactsList.module.css';\r\n\r\nconst ContactsList = ({\r\n  contacts,\r\n  isLoadingContacts,\r\n  onDelete,\r\n  fetchContacts,\r\n}) => {\r\n  useEffect(() => fetchContacts(), []);\r\n\r\n  const handlerDelete = event => {\r\n    onDelete(event.currentTarget.id);\r\n  };\r\n\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button\r\n            id={id}\r\n            className={styles.ContactButton}\r\n            type=\"button\"\r\n            onClick={handlerDelete}\r\n          >\r\n            Delete\r\n          </button>\r\n          {isLoadingContacts && <h1>Loading...</h1>}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getVisibleContacts(state),\r\n    filter: contactsSelectors.getFilter(state),\r\n    isLoadingContacts: contactsSelectors.getLoading(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n  onDelete: value => dispatch(contactsOperations.deleteContact(value)),\r\n});\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(ContactsList);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { updateFilter } from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({ updateFilter }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        onChange={updateFilter}\r\n        id=\"find\"\r\n        placeholder=\"Enter name for Search\"\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchProps = dispatch => {\r\n  return {\r\n    updateFilter: event => dispatch(updateFilter(event.target.value)),\r\n  };\r\n};\r\n\r\nFilter.propTypes = {\r\n  updateFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchProps)(Filter);\r\n","import { Component } from 'react';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport ContactsList from '../ContactsList/ContactsList';\r\nimport Container from '../Container/Container';\r\nimport Filter from '../Filter/Filter';\r\n\r\nexport default class Contacts extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h2>Form Contact</h2>\r\n        <ContactForm />\r\n        <h2>Contacts List</h2>\r\n        <Filter />\r\n        <ContactsList />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}